{"content": {"3207219": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>How can I list all files of a directory in python and add them to a list?</p>\\n</body></html>'", "379906": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>In Python, how can I parse a numeric string like <code>\"545.2222\"</code> to its corresponding float value, <code>542.2222</code>? Or parse the string <code>\"31\"</code> to an integer, <code>31</code>?</p>\\n\\n<p>I just want to know how to parse a float string to a float, and (separately) an int string to an int.</p>\\n</body></html>'", "3437059": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I\\'m looking for a <code>string.contains</code> or <code>string.indexof</code> method in Python.</p>\\n\\n<p>I want to do:</p>\\n\\n<pre><code>if not somestring.contains(\"blah\"):\\n   continue\\n</code></pre>\\n</body></html>'", "3684484": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I\\'m helping a veterinary clinic measuring pressure under a dogs paw. I use Python for my data analysis and now I\\'m stuck trying to divide the paws into (anatomical) subregions.</p>\\n\\n<p>I made a 2D array of each paw, that consists of the maximal values for each sensor that has been loaded by the paw over time. Here\\'s an example of one paw, where I used Excel to draw the areas I want to \\'detect\\'. These are 2 by 2 boxes around the sensor with local maxima\\'s, that together have the largest sum.</p>\\n\\n<p><img src=\"http://i.stack.imgur.com/BuUbq.png\" alt=\"alt text\"/></p>\\n\\n<p>So I tried some experimenting and decide to simply look for the maximums of each column and row (can\\'t look in one direction due to the shape of the paw). This seems to \\'detect\\' the location of the separate toes fairly well, but it also marks neighboring sensors. </p>\\n\\n<p><img src=\"http://i.stack.imgur.com/UyNRU.png\" alt=\"alt text\"/></p>\\n\\n<p>So what would be the best way to tell Python which of these maximums are the ones I want? </p>\\n\\n<p><strong>Note: The 2x2 squares can\\'t overlap, since they have to be separate toes!</strong></p>\\n\\n<p>Also I took 2x2 as a convenience, any more advanced solution is welcome, but I\\'m simply a human movement scientist, so I\\'m neither a real programmer or a mathematician, so please keep it \\'simple\\'. </p>\\n\\n<p>Here\\'s a <a href=\"https://docs.google.com/document/edit?id=1j8Dup2Sy--66CEFBUgoJon3VAkfpXqM-TCe60-a7jx0&amp;authkey=CJLM77oF&amp;hl=en#\">version that can be loaded with <code>np.loadtxt</code></a></p>\\n\\n<hr/>\\n\\n<h2>Results</h2>\\n\\n<p>So I tried @jextee\\'s solution (see the results below). As you can see, it works very on the front paws, but it works less well for the hind legs. </p>\\n\\n<p>More specifically, it can\\'t recognize the small peak that\\'s the fourth toe. This is obviously inherent to the fact that the loop looks top down towards the lowest value, without taking into account where this is. </p>\\n\\n<p>Would anyone know how to tweak @jextee\\'s algorithm, so that it might be able to find the 4th toe too?</p>\\n\\n<p><img src=\"http://i.stack.imgur.com/FFX0x.png\" alt=\"alt text\"/></p>\\n\\n<p>Since I haven\\'t processed any other trials yet, I can\\'t supply any other samples. But the data I gave before were the averages of each paw. This file is an array with the maximal data of 9 paws in the order they made contact with the plate.</p>\\n\\n<p>This image shows how they were spatially spread out over the plate.</p>\\n\\n<p><img src=\"http://i.stack.imgur.com/iPXEv.png\" alt=\"alt text\"/></p>\\n\\n<h2>Update:</h2>\\n\\n<p><strong><a href=\"http://superivo.wordpress.com/\">I have set up a blog for anyone interested</a></strong> and <a href=\"http://cid-0e685da213fd5935.skydrive.live.com/redir.aspx?page=browse&amp;resid=E685DA213FD5935!148&amp;type=6&amp;authkey=WOUgehAzQ!o%24&amp;Bsrc=EMSHGM&amp;Bpub=SN.Notifications\">I have setup a SkyDrive with all the raw measurements.</a> So to anyone requesting more data: more power to you! </p>\\n\\n<hr/>\\n\\n<h2>New update:</h2>\\n\\n<p>So after the help I got with my questions regarding <a href=\"http://stackoverflow.com/q/4087919/77595\">paw detection</a> and <a href=\"http://stackoverflow.com/q/4502656/77595\">paw sorting</a>, I was finally able to check the toe detection for every paw! Turns out, it doesn\\'t work so well in anything but paws sized like the one in my own example. Off course in hindsight, it\\'s my own fault for choosing the 2x2 so arbitrarily.</p>\\n\\n<p>Here\\'s a nice example of where it goes wrong: a nail is being recognized as a toe and the \\'heel\\' is so wide, it gets recognized twice!</p>\\n\\n<p><img src=\"http://i.stack.imgur.com/JEpIa.png\" alt=\"alt text\"/></p>\\n\\n<p>The paw is too large, so taking a 2x2 size with no overlap, causes some toes to be detected twice. The other way around, in small dogs it often fails to find a 5th toe, which I suspect is being caused by the 2x2 area being too large.</p>\\n\\n<p>After <a href=\"http://www.flipserd.com/blog/ivoflipse/post/toe-detection-revisited\">trying the current solution on all my measurements</a> I came to the staggering conclusion that for nearly all my small dogs it didn\\'t find a 5th toe and that in over 50% of the impacts for the large dogs it would find more!</p>\\n\\n<p>So clearly I need to change it. My own guess was changing the size of the <code>neighborhood</code> to something smaller for small dogs and larger for large dogs. But <code>generate_binary_structure</code> wouldn\\'t let me change the size of the array. </p>\\n\\n<p>Therefore, I\\'m hoping that anyone else has a better suggestion for locating the toes, perhaps having the toe area scale with the paw size?</p>\\n</body></html>'", "176918": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>For a list <code>[\"foo\",\"bar\",\"baz\"]</code> and an item in the list <code>\"bar\"</code>, what\\'s the cleanest way to get its index (1) in Python?</p>\\n</body></html>'", "53513": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>For example, if passed the following:</p>\\n\\n<pre><code>a = []\\n</code></pre>\\n\\n<p>How do I check to see if <code>a</code> is empty?</p>\\n</body></html>'", "89228": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>How can I call an external command in Python? In other words, how can I spawn a process?</p>\\n</body></html>'", "1132941": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:</p>\\n\\n<pre><code>def foo(a=[]):\\n    a.append(5)\\n    return a\\n</code></pre>\\n\\n<p>Python novices would expect this function to always return a list with only one element: <code>[5]</code>. The result is instead very different, and very astonishing (for a novice):</p>\\n\\n<pre><code>&gt;&gt;&gt; foo()\\n[5]\\n&gt;&gt;&gt; foo()\\n[5, 5]\\n&gt;&gt;&gt; foo()\\n[5, 5, 5]\\n&gt;&gt;&gt; foo()\\n[5, 5, 5, 5]\\n&gt;&gt;&gt; foo()\\n</code></pre>\\n\\n<p>A manager of mine once had his first encountered with this feature, and called it \"a dramatic design flaw\" of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don\\'t understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs ?)</p>\\n\\n<p><strong>Edit</strong>: </p>\\n\\n<p>Baczek made an interesting example. Together with most of your comments and Utaal\\'s in particular, I elaborated further:</p>\\n\\n<pre><code>&gt;&gt;&gt; def a():\\n...     print \"a executed\"\\n...     return []\\n... \\n&gt;&gt;&gt;            \\n&gt;&gt;&gt; def b(x=a()):\\n...     x.append(5)\\n...     print x\\n... \\na executed\\n&gt;&gt;&gt; b()\\n[5]\\n&gt;&gt;&gt; b()\\n[5, 5]\\n</code></pre>\\n\\n<p>To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function or \"together\" with it?</p>\\n\\n<p>Doing the binding inside the function would mean that <code>x</code> is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the <code>def</code> line would be \"hybrid\" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.</p>\\n\\n<p>The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.</p>\\n\\n<p>Guido is a fantastic designer.</p>\\n\\n<p><strong>Edit</strong></p>\\n\\n<p>I reread all the very interesting and good answers you provided, and it was hard to assign a \"correct tickmark\", as everyone had good points in the answer. I marked Roberto\\'s answer as correct because it was simpler and revealing, so that newcomers browsing this question can start from his answer and then delve into remaining more complex (but very insightful) answers.</p>\\n</body></html>'", "82831": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>How do I check if a file exists, using Python, without using a <code>try:</code> statement?</p>\\n</body></html>'", "312443": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it. There are some obvious ways to do this, like keeping a counter and two lists, and when the second list fills up, add it to the first list and empty the second list for the next round of data, but this is potentially extremely expensive.</p>\\n\\n<p>I was wondering if anyone had a good solution to this for lists of any length, e.g. using generators.</p>\\n\\n<p>This should work:</p>\\n\\n<pre><code>l = range(1, 1000)\\nprint chunks(l, 10) -&gt; [ [ 1..10 ], [ 11..20 ], .., [ 991..999 ] ]\\n</code></pre>\\n\\n<p>I was looking for something useful in <code>itertools</code> but I couldn\\'t find anything obviously useful. Might\\'ve missed it, though.</p>\\n\\n<p>Related question: <a href=\"http://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks\">What is the most &#8220;pythonic&#8221; way to iterate over a list in chunks?</a></p>\\n</body></html>'", "522563": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Does anyone know how to access the index itself for a list like this:</p>\\n\\n<pre><code>ints = [8, 23, 45, 12, 78]\\n</code></pre>\\n\\n<p>When I loop through it using a for loop, how do I access the loop index, from 1 to 5 in this case?</p>\\n</body></html>'", "101268": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What are the lesser-known but useful features of the Python programming language?</p>\\n\\n<ul>\\n<li>Try to limit answers to Python core.</li>\\n<li>One feature per answer.</li>\\n<li>Give an example and short description of the feature, not just a link to documentation.</li>\\n<li>Label the feature using a title as the first line.</li>\\n</ul>\\n\\n<h2>Quick links to answers:</h2>\\n\\n<ul>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#111176\">Argument Unpacking</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#112303\">Braces</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#101945\">Chaining Comparison Operators</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#101447\">Decorators</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#113198\">Default Argument Gotchas / Dangers of Mutable Default arguments</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#102062\">Descriptors</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#111970\">Dictionary default <code>.get</code> value</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#102065\">Docstring Tests</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python/112316#112316\">Ellipsis Slicing Syntax</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#117116\">Enumeration</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#114420\">For/else</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#102202\">Function as iter() argument</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#101310\">Generator expressions</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#101276\"><code>import this</code></a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#102037\">In Place Value Swapping</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#101840\">List stepping</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#112286\"><code>__missing__</code> items</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#101537\">Multi-line Regex</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#113164\">Named string formatting</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#101549\">Nested list/generator comprehensions</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#108297\">New types at runtime</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#113833\"><code>.pth</code> files</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#1024693\">ROT13 Encoding</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#143636\">Regex Debugging</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#101739\">Sending to Generators</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#168270\">Tab Completion in Interactive Interpreter</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#116480\">Ternary Expression</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#114157\"><code>try/except/else</code></a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#3267903\">Unpacking+<code>print()</code> function</a></li>\\n<li><a href=\"http://stackoverflow.com/questions/101268/hidden-features-of-python#109182\"><code>with</code> statement</a></li>\\n</ul>\\n</body></html>'", "986006": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value \\'Original\\'</p>\\n\\n<pre><code>class PassByReference:\\n    def __init__(self):\\n        self.variable = \\'Original\\'\\n        self.Change(self.variable)\\n        print self.variable\\n\\n    def Change(self, var):\\n        var = \\'Changed\\'\\n</code></pre>\\n\\n<p>Is there something I can do to pass the variable by actual reference?</p>\\n</body></html>'", "415511": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Can anybody tell what is the module/method used to get current time?</p>\\n</body></html>'", "1450393": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I\\'m trying to do some of the <a href=\"http://en.wikipedia.org/wiki/Code_golf\">code golf</a> challenges, but they all require the input to be taken from stdin. How do I get that in Python?</p>\\n</body></html>'", "509211": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Do you have a good reference on Python\\'s slice notation? To me, this notation needs a bit of picking up. It looks extremely powerful, but I haven\\'t quite got my head around it and am looking for a good guide.</p>\\n</body></html>'", "6470428": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I know that I can do:</p>\\n\\n<pre><code>try:\\n    # do something that may fail\\nexcept:\\n    # do this if ANYTHING goes wrong\\n</code></pre>\\n\\n<p>I can also do this:</p>\\n\\n<pre><code>try:\\n    # do something that may fail\\nexcept IDontLikeYourFaceException:\\n    # put on makeup or smile\\nexcept YouAreTooShortException:\\n    # stand on a ladder\\n</code></pre>\\n\\n<p>But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:</p>\\n\\n<pre><code>try:\\n    # do something that may fail\\nexcept IDontLIkeYouException:\\n    # say please\\nexcept YouAreBeingMeanException:\\n    # say please\\n</code></pre>\\n\\n<p>Is there any way that I can do something like this (since the action to take in both exceptions is to <code>say please</code>):</p>\\n\\n<pre><code>try:\\n    # do something that may fail\\nexcept IDontLIkeYouException, YouAreBeingMeanException:\\n    # say please\\n</code></pre>\\n\\n<p>Now this really won\\'t work, as it matches the syntax for:</p>\\n\\n<pre><code>try:\\n    # do something that may fail\\nexcept Exception, e:\\n    # say please\\n</code></pre>\\n\\n<p>So, my effort to catch the two distinct exceptions doesn\\'t exactly come through.</p>\\n\\n<p>Is there a way to do this?</p>\\n</body></html>'", "1436703": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What is the difference between <code>__str__</code> and <code>__repr__</code> in Python?</p>\\n</body></html>'", "136097": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What is the difference between a function decorated with <a href=\"http://docs.python.org/2/library/functions.html#staticmethod\"><code>@staticmethod</code></a> and one decorated with <a href=\"http://docs.python.org/2/library/functions.html#classmethod\"><code>@classmethod</code></a>?</p>\\n</body></html>'", "100003": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What are metaclasses? What do you use them for?</p>\\n</body></html>'", "68645": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Is it possible to have static class variables or methods in python? What syntax is required to do this?</p>\\n</body></html>'", "72899": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I got a list of dictionaries and want that to be sorted by a value of that dictionary.</p>\\n\\n<p>This</p>\\n\\n<pre><code>[{\\'name\\':\\'Homer\\', \\'age\\':39}, {\\'name\\':\\'Bart\\', \\'age\\':10}]\\n</code></pre>\\n\\n<p>sorted by name, should become</p>\\n\\n<pre><code>[{\\'name\\':\\'Bart\\', \\'age\\':10}, {\\'name\\':\\'Homer\\', \\'age\\':39}]\\n</code></pre>\\n</body></html>'", "273192": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What\\'s the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory? Here is what I tried:</p>\\n\\n<pre><code>filename = \"/my/directory/filename.txt\"\\ndir = os.path.dirname(filename)\\n\\ntry:\\n    os.stat(dir)\\nexcept:\\n    os.mkdir(dir)       \\n\\nf = file(filename)\\n</code></pre>\\n\\n<p>Somehow, I missed <code>os.path.exists</code> (thanks kanja, Blair, and Douglas). This is what I have now:</p>\\n\\n<pre><code>def ensure_dir(f):\\n    d = os.path.dirname(f)\\n    if not os.path.exists(d):\\n        os.makedirs(d)\\n</code></pre>\\n\\n<p>Is there a flag for \"open\", that makes this happen automatically?</p>\\n</body></html>'", "576169": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I\\'m trying to understand <code>super()</code>. From the looks of it, both child classes can be created just fine. I\\'m curious as to what difference there actually is in this code:</p>\\n\\n<pre><code>class Base(object):\\n    def __init__(self):\\n        print \"Base created\"\\n\\nclass ChildA(Base):\\n    def __init__(self):\\n        Base.__init__(self)\\n\\nclass ChildB(Base):\\n    def __init__(self):\\n        super(ChildB, self).__init__()\\n\\nprint ChildA(),ChildB()\\n</code></pre>\\n</body></html>'", "81584": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Asking as a Python beginner, what IDEs (\"GUIs/editors\") do others use for Python coding?</p>\\n\\n<p>If you can just give the name (for example, Textpad, Eclipse ..) that will be enough. If it is already mentioned, you can just vote for it.</p>\\n\\n<p>But if you can also give some more comparative information, that will be much appreciated.</p>\\n\\n<hr/>\\n\\n<h2><strong>Update</strong>: Results so far</h2>\\n\\n<pre>\\n                                       Rapid Application Development -.\\n                                           Integrated DB Support -+   |\\n                                                GUI Designer  -+  |   |\\n                                             Unit Testing -+   |  |   |\\n                                        Code Templates -.  |   |  |   |\\n                                       Code Folding -+  |  |   |  |   |\\n                           UML Editing / Viewing -+  |  |  |   |  |   |\\n                              Line Numbering -+   |  |  |  |   |  |   |\\n                         Bracket Matching -+  |   |  |  |  |   |  |   |\\n                          Smart Indent -+  |  |   |  |  |  |   |  |   |\\n         Source Control Integration -+  |  |  |   |  |  |  |   |  |   |\\n                   Error Markup  -+  |  |  |  |   |  |  |  |   |  |   |\\n  Integrated Python Debugging -+  |  |  |  |  |   |  |  |  |   |  |   |\\n    Multi-Language Support -+  |  |  |  |  |  |   |  |  |  |   |  |   |\\n  Auto Code Completion -+   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n Commercial / Free --+  |   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n Cross Platform -+   |  |   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n                _|___|__|___|__|__|__|__|__|__|___|__|__|__|___|__|___|_\\n                |CP|C/F|AC|MLS|PD|EM|SC|SI|BM|LN|UML|CF|CT|UT|UID|DB|RAD|comments\\n                +--+---+--+---+--+--+--+--+--+--+---+--+--+--+---+--+---+\\n BlackAdder     |Y | C |  |   |  |  |  |Y |  |  |   |Y |  |  |   |  |   |\\n BlueFish       |L |   |  |   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n Boa Constructor|Y | F |Y |   |Y |Y |  |Y |Y |Y | Y |Y |Y |  |   |  |   |\\n ConTEXT        |W | C |  |   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n DABO           |Y |   |  |   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n DreamPie       |  | F |  |   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n Dr.Python      |  | F |  |   |  |Y |  |  |  |  |   |  |  |  |   |  |   |\\n Editra         |Y | F |Y | Y |  |  |Y |Y |Y |Y |   |Y |  |  |   |  |   |\\n Emacs          |Y | F |Y | Y |Y |Y |Y |Y |Y |Y | Y |Y |Y |Y |   |  |   |\\n Eric Ide       |Y | F |Y |   |Y |Y |  |Y |  |Y |   |Y |  |Y |   |  |   |\\n E-Texteditor   |W |   |  |   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n Geany          |Y | F |Y*| Y |  |  |  |Y |Y |Y |   |Y |  |  |   |  |   |* very limited\\n Gedit          |Y | F |Y&#185;| Y |  |  |  |Y |Y |Y |   |  |Y&#178;|  |   |  |   |&#185; with plugin &#178; sort of\\n Idle           |Y | F |Y |   |  |  |  |  |  |  |   |  |  |  |   |  |   |\\n JEdit          |Y | F |  | Y |  |  |  |  |Y |Y |   |Y |  |  |   |  |   |\\n KDevelop       |Y | F |  | Y |  |  |Y |Y |Y |Y |   |Y |  |  |   |  |   |\\n Komodo         |Y |C/F|Y | Y |Y |Y |Y |Y |Y |Y |   |Y |Y |Y |   |Y |   |\\n NetBeans       |Y | F |Y | Y |Y |  |Y |Y |Y |Y | Y |Y |Y |Y |   |  | Y |\\n NotePad++      |W | F |  | Y |  |  |  |  |  |Y |   |  |  |  |   |  |   |\\n Pfaide         |W | C |Y | Y |  |  |  |Y |Y |Y |   |Y |Y |  |   |  |   |\\n PIDA           |LW| F |Y | Y |  |  |  |Y |Y |Y |   |Y |  |  |   |  |   |VIM based\\n PTVS           |W | F |Y | Y |Y |Y |Y |Y |Y |Y |   |Y |  |  |Y* |  | Y |*WPF bsed\\n PyCharm        |Y | C |Y | Y*|Y |  |Y |Y |Y |Y |   |Y |  |Y |   |  |   |* javascript\\n PyDev(Eclipse) |Y | F |Y | Y |Y |Y |Y |Y |Y |Y | Y |Y |Y |Y |   |  |   |\\n Pyscripter     |W | F |Y |   |Y |Y |  |Y |  |Y |   |  |Y |Y |   |  |   |\\n PythonWin      |W | F |Y |   |Y |  |  |Y |Y |  |   |Y |  |  |   |  |   |\\n SciTE          |Y | F |  | Y |  |Y |  |  |Y |Y |   |Y |Y |  |   |  |   |\\n ScriptDev      |W | C |Y | Y |Y |Y |  |Y |Y |Y |   |Y |Y |  |   |  |   |\\n SPE            |  | F |Y |   |  |  |  |  |  |  | Y |  |  |  |   |  |   |\\n Spyder         |Y | F |Y |   |Y |Y |  |Y |Y |Y |   |  |  |  |   |  |   |\\n Sublime Text   |Y | C |Y | Y |  |  |  |Y |Y |Y |   |  |Y |  |   |  |   |extensible w/python\\n TextMate       |M |   |  | Y |  |  |  |Y |Y |Y |   |Y |Y |  |   |  |   |\\n UliPad         |Y | F |Y | Y |Y |  |  |Y |Y |  |   |  |Y |Y |   |  |   |\\n Vim            |Y | F |Y | Y |Y |Y |Y |Y |Y |Y |   |Y |Y |Y |   |  |   |\\n WingIde        |Y | C |Y | Y*|Y |Y |Y |Y |Y |Y |   |Y |Y |Y |   |  |   |* support for C\\n Zeus           |W | C |  |   |  |  |Y |Y |Y |Y |   |Y |Y |  |   |  |   |\\n                +--+---+--+---+--+--+--+--+--+--+---+--+--+--+---+--+---+\\n                |CP|C/F|AC|MLS|PD|EM|SC|SI|BM|LN|UML|CF|CT|UT|UID|DB|RAD|\\n                |__|___|__|___|__|__|__|__|__|__|___|__|__|__|___|__|___|\\n</pre>\\n\\n<hr/>\\n\\n<p>Acronyms used: </p>\\n\\n<ul>\\n<li>CP - Cross Platform</li>\\n<li>C - Commercial</li>\\n<li>F - Free</li>\\n<li>AC - Automatic Code-completion</li>\\n<li>MLS - Multi-Language Support</li>\\n<li>PD - Integrated Python Debugging</li>\\n<li>EM - ErrorMarkup </li>\\n<li>SC - Source Control integration</li>\\n<li>SI  -  Smart Indent</li>\\n<li>BM  - Bracket Matching</li>\\n<li>LN  -  Line Numbering</li>\\n<li>UML - UML editing / viewing</li>\\n<li>CF - Code Folding</li>\\n<li>CT - Code Templates</li>\\n<li>UT - Unit Testing</li>\\n<li>UID -  GUI Designer (for example, Qt, Eric, ..)</li>\\n<li>DB - integrated database support</li>\\n<li>RAD - Rapid application development support</li>\\n<li>L - Linux</li>\\n<li>W - Windows</li>\\n<li>M - Mac</li>\\n</ul>\\n\\n<p>I don\\'t mention basics like syntax highlighting as I expect these by default.</p>\\n\\n<hr/>\\n\\n<p>This is a just dry list reflecting your feedback and comments, I am not advocating any of these tools. I will keep updating this list as you keep posting your answers.</p>\\n\\n<p><em><strong>PS. Can you help me to add features of the above editors to the list (like auto-complete, debugging, etc.)?</strong></em></p>\\n</body></html>'", "11241523": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><pre><code>def main():\\n    for i in xrange(10**8):\\n        pass\\nmain()\\n</code></pre>\\n\\n<p>This piece of code in Python runs in  </p>\\n\\n<pre><code>real    0m1.841s\\nuser    0m1.828s\\nsys     0m0.012s\\n</code></pre>\\n\\n<p>However, if the for loop isn\\'t placed within a function, </p>\\n\\n<pre><code>for i in xrange(10**8):\\n    pass\\n</code></pre>\\n\\n<p>then it runs for a much longer time:</p>\\n\\n<pre><code>real    0m4.543s\\nuser    0m4.524s\\nsys     0m0.012s\\n</code></pre>\\n\\n<p>Why is this?</p>\\n\\n<p>Note: The timing is done with the time function in BASH in Linux.</p>\\n</body></html>'", "3220404": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>A <a href=\"http://twitter.com/jperras/statuses/18160589493\">tweet</a> reads: </p>\\n\\n<blockquote>\\n  <p>Don\\'t use easy_install, unless you\\n  like stabbing yourself in the face.\\n  Use pip.</p>\\n</blockquote>\\n\\n<p>Why use pip over easy_install? Doesn\\'t the <a href=\"http://mail.python.org/pipermail/catalog-sig/2010-June/002985.html\">fault lie with PyPI and package authors mostly</a>? If an author uploads crap source tarball (eg: missing files, no setup.py) to PyPI, then both pip and easy_install will fail. Other than cosmetic differences, why do Python people (like in the above tweet) seem to <strong>strongly</strong> favor pip over easy_install?</p>\\n\\n<p>(Let\\'s assume that we\\'re talking about easy_install from the Distribute package, that is maintained by the community)</p>\\n</body></html>'", "394809": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>If not, is it possible to simulate one concisely using other language constructs?</p>\\n</body></html>'", "252703": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What is the difference between the list methods <code>append</code> and <code>extend</code>?</p>\\n</body></html>'", "613183": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique so that is the key of the dictionary.</p>\\n\\n<p>I can sort on the keys, but how can I sort based on the values?</p>\\n\\n<p>Note: I have read Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/72899\">How do I sort a list of dictionaries by values of the dictionary in Python?</a></em> and probably could change my code to have a list of dictionaries but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution.</p>\\n</body></html>'", "38987": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged.  The update() method would be what I need, if it returned its result instead of modifying a dict in-place.</p>\\n\\n<pre><code>&gt;&gt;&gt; x = {\\'a\\':1, \\'b\\': 2}\\n&gt;&gt;&gt; y = {\\'b\\':10, \\'c\\': 11}\\n&gt;&gt;&gt; z = x.update(y)\\n&gt;&gt;&gt; print z\\nNone\\n&gt;&gt;&gt; x\\n{\\'a\\': 1, \\'b\\': 10, \\'c\\': 11}\\n</code></pre>\\n\\n<p>So I want that final merged dict in z, not x.  How can I do this?</p>\\n\\n<p>(To be extra-clear, the last-one-wins conflict-handling of <code>dict.update()</code> is what I\\'m looking for as well.)</p>\\n</body></html>'", "36932": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I\\'m mainly a C# developer, but I\\'m currently working on a project in Python.</p>\\n\\n<p>How can I represent the equivalent of an Enum in Python?  </p>\\n</body></html>'", "279237": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>How do I import a python module given its relative path?</p>\\n\\n<p>For example, if <code>dirFoo</code> contains <code>Foo.py</code> and <code>dirBar</code>, and <code>dirBar</code> contains <code>Bar.py</code>, how do I import <code>Bar.py</code> into <code>Foo.py</code>?</p>\\n\\n<p>Here\\'s a visual representation:</p>\\n\\n<pre><code>dirFoo\\\\\\n    Foo.py\\n    dirBar\\\\\\n        Bar.py\\n</code></pre>\\n\\n<p><code>Foo</code> wishes to include <code>Bar</code>, but restructuring the folder heirarchy is not an option.</p>\\n</body></html>'", "739654": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>How can I make two decorators in Python that would do the following?</p>\\n\\n<pre><code>@makebold\\n@makeitalic\\ndef say():\\n   return \"Hello\"\\n</code></pre>\\n\\n<p>which should return</p>\\n\\n<pre><code>&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;\\n</code></pre>\\n\\n<p>I\\'m not trying to make HTML this way in a real application, just trying to understand how decorators and decorator chaining works.</p>\\n</body></html>'", "1231688": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Python\\'s <code>easy_install</code> makes installing new packages extremely convenient. However, as far as I can tell, it doesn\\'t implement the other common features of a dependency manager - listing and removing installed packages.</p>\\n\\n<p>What is the best way of finding out what\\'s installed, and what is the preferred way of removing installed packages? Are there any files that need to be updated if I remove packages manually (e.g. by <code>rm /usr/local/lib/python2.6/dist-packages/my_installed_pkg.egg</code> or similar)?</p>\\n</body></html>'", "275018": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>This is one of my most common questions when I am coding Python (I was fed Perl as a baby and am forever trying to get rid of that affliction) and I wanted to put it out there on stack overflow so that next time I search for \\'chomp python\\' on google, I get a useful answer.</p>\\n</body></html>'", "56011": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>According to the documentation, they\\'re pretty much interchangeable.  Is there a stylistic reason to use one over the other?</p>\\n</body></html>'", "886221": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I\\'m building a web application with Django. The reasons I chose Django were:</p>\\n\\n<ul>\\n<li>I wanted to work with free/open-source tools.</li>\\n<li>I like Python and feel it\\'s a \"long term\" language, whereas regarding Ruby I wasn\\'t sure, and PHP seemed like a huge hassle to learn.</li>\\n<li>I\\'m building a prototype for an idea and wasn\\'t thinking too much about the future. Development speed was the main factor, and I already knew Python.</li>\\n<li>I knew the migration to Google App Engine would be easier should I choose to do so in the future.</li>\\n<li>I heard Django was \"nice\".</li>\\n</ul>\\n\\n<p>Now that I\\'m getting closer to thinking about publishing my work, I start being concerned about scale. The only information I found about the scaling capabilities of Django is provided by the Django team (I\\'m not saying anything to disregard them, but this is clearly not objective information...).</p>\\n\\n<p>My questions:</p>\\n\\n<ul>\\n<li>What\\'s the \"largest\" site that\\'s built on Django today? (I measure size mostly by user traffic)</li>\\n<li>Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?</li>\\n<li>Could a site like Stack Overflow run on Django?</li>\\n</ul>\\n</body></html>'", "2573135": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I\\'ve been learning, working, and playing with Python for a year and a half now. As a biologist slowly making the turn to bio-informatics, this language has been at the very core of all the major contributions I have made in the lab. I more or less fell in love with the way Python permits me to express beautiful solutions and also with the semantics of the language that allows such a natural flow from thoughts to workable code.</p>\\n\\n<p>What I would like to know is your answer to a kind of question I have seldom seen in this or other forums. This question seems central to me for anyone on the path to Python improvement but who wonders what his next steps should be.</p>\\n\\n<p>Let me sum up what I do NOT want to ask first ;)</p>\\n\\n<ul>\\n<li>I don\\'t want to know how to QUICKLY learn Python</li>\\n<li>Nor do I want to find out the best way to get acquainted with the language</li>\\n<li>Finally, I don\\'t want to know a \\'one trick that does it all\\' approach.</li>\\n</ul>\\n\\n<p>What I do want to know your opinion about, is:</p>\\n\\n<p><strong>What are the steps YOU would recommend to a Python journeyman, from apprenticeship to guru status (feel free to stop wherever your expertise dictates it), in order that one IMPROVES CONSTANTLY, becoming a better and better Python coder, one step at a time. Some of the people on SO almost seem worthy of worship for their Python prowess, please enlighten us :)</strong></p>\\n\\n<p>The kind of answers I would enjoy (but feel free to surprise the readership :P ), is formatted more or less like this:</p>\\n\\n<ul>\\n<li>Read this (eg: python tutorial), pay attention to that kind of details</li>\\n<li>Code for so manytime/problems/lines of code</li>\\n<li>Then, read this (eg: this or that book), but this time, pay attention to this</li>\\n<li>Tackle a few real-life problems</li>\\n<li>Then, proceed to reading Y.</li>\\n<li>Be sure to grasp these concepts</li>\\n<li>Code for X time</li>\\n<li>Come back to such and such basics or move further to...</li>\\n<li>(you get the point :)</li>\\n</ul>\\n\\n<p>I really care about knowing your opinion on what exactly one should pay attention to, at various stages, in order to progress CONSTANTLY (with due efforts, of course). If you come from a specific field of expertise, discuss the path you see as appropriate in this field.</p>\\n\\n<p>EDIT: Thanks to your great input, I\\'m back on the Python improvement track! I really appreciate!</p>\\n</body></html>'", "952914": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><blockquote>\\n  <p><strong>Possible Duplicates:</strong><br/>\\n  <a href=\"http://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python\">Flattening a shallow list in Python</a><br/>\\n  <a href=\"http://stackoverflow.com/questions/457215/comprehension-for-flattening-a-sequence-of-sequences\">Comprehension for flattening a sequence of sequences?</a>  </p>\\n</blockquote>\\n\\n<p>I wonder whether there is a shortcut to make a simple list out of list of lists in Python.</p>\\n\\n<p>I can do that in a for loop, but maybe there is some cool \"one-liner\"? I tried it with <em>reduce</em>, but I get an error.</p>\\n\\n<p><strong>Code</strong></p>\\n\\n<pre><code>l = [[1,2,3],[4,5,6], [7], [8,9]]\\nreduce(lambda x,y: x.extend(y),l)\\n</code></pre>\\n\\n<p><strong>Error message</strong>    </p>\\n\\n<blockquote>\\n  <p>Traceback (most recent call last):\\n        File \"\", line 1, in \\n        File \"\", line 1, in \\n      AttributeError: \\'NoneType\\' object has no attribute \\'extend\\'</p>\\n</blockquote>\\n</body></html>'", "423379": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>If I create a global variable in one function, how can I use that variable in another function?<br/>\\nDo I need to store the global variable in a local variable of the function which needs its access?</p>\\n</body></html>'", "663171": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Is there a way to substring a string in Python, to get a new string from the 3rd character to the end of the string?</p>\\n\\n<p>Maybe like <code>myString[2:end]</code>?</p>\\n\\n<p>EDIT: If leaving the second part means \\'till the end\\', if you leave the first part, does it start from the start?</p>\\n</body></html>'", "4750806": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>How should pip be installed on windows?</p>\\n\\n<p><em>Summary of the answers:</em></p>\\n\\n<p>Depending on your python version and whether you want to use it inside a virtual environment or not:</p>\\n\\n<ul>\\n<li><p>If you are running the recent version <code>Python 3.4</code>, pip is already included in the regular install, see matth\\'s <a href=\"http://stackoverflow.com/a/21182892/362951%22answer%20below%22\">answer below</a>. Check if you already have the <code>Scripts</code> directory from your Python installation directory in your system\\'s environment variable <code>Path</code>, so pip will be found there, if you want to use pip from the commandline.</p></li>\\n<li><p>A very straightforward approach (<strong>as of March 2014</strong>) for many other setups is to follow <a href=\"http://pip.pypa.io/en/latest/installing.html\">these instructions from pip.pypa.io</a>, namely download <a href=\"https://bootstrap.pypa.io/get-pip.py\">get-pip.py</a> and run <code>python get-pip.py</code> (may require admin access). Note that <code>pip.exe</code> will be placed inside your Python installation\\'s Scripts folder, which is likely not on your path (fix that by running <code>C:\\\\PythonXX\\\\Tools\\\\Scripts\\\\win_add2path.py</code>).</p></li>\\n<li><p>You can install and use pip inside a <strong>virtual environment</strong>. And again, if you install a recent <code>Python 3.4</code> <code>VENV</code>, pip will most likely already be included. If it is not available there, you can run <code>python get-pip.py</code> inside the virtual environment, see above. See also thegauraw\\'s answer <a href=\"http://pip.pypa.io/en/latest/installing.html\">here</a>.</p></li>\\n</ul>\\n\\n<p><em>Alternative ways:</em></p>\\n\\n<ul>\\n<li><p>If you are an <strong>ActivePython</strong> user, see Rafe Kettler\\'s answer <a href=\"https://bootstrap.pypa.io/get-pip.py\">here</a>. </p></li>\\n<li><p>If you are a <strong>chocolatey</strong> user, which is an apt-get like packaging system on windows, you can try Martin Redola\\'s answer <a href=\"http://stackoverflow.com/a/21182892/362951%22answer%20below%22\">here</a> .</p></li>\\n</ul>\\n</body></html>'", "231767": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What is the use of the <code>yield</code> keyword in Python? What does it do?</p>\\n\\n<p>For example, I\\'m trying to understand this code (**):</p>\\n\\n<pre><code>def node._get_child_candidates(self, distance, min_dist, max_dist):\\n    if self._leftchild and distance - max_dist &lt; self._median:\\n        yield self._leftchild\\n    if self._rightchild and distance + max_dist &gt;= self._median:\\n        yield self._rightchild  \\n</code></pre>\\n\\n<p>And this is the caller:</p>\\n\\n<pre><code>result, candidates = list(), [self]\\nwhile candidates:\\n    node = candidates.pop()\\n    distance = node._get_dist(obj)\\n    if distance &lt;= max_dist and distance &gt;= min_dist:\\n        result.extend(node._values)\\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\\nreturn result\\n</code></pre>\\n\\n<p>What happens when the method <code>_get_child_candidates</code> is called?\\nA list is returned? A single element is returned? Is it called again? When subsequent calls do stop?</p>\\n\\n<p>** The code comes from Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"http://well-adjusted.de/~jrschulz/mspace/\">Module mspace</a>.</p>\\n</body></html>'", "419163": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What does the <code>if __name__ == \"__main__\":</code> do?</p>\\n\\n<pre><code># Threading example\\nimport time, thread\\n\\ndef myfunction(string, sleeptime, lock, *args):\\n    while 1:\\n        lock.acquire()\\n        time.sleep(sleeptime)\\n        lock.release()\\n        time.sleep(sleeptime)\\nif __name__ == \"__main__\":\\n    lock = thread.allocate_lock()\\n    thread.start_new_thread(myfunction, (\"Thread #: 1\", 2, lock))\\n    thread.start_new_thread(myfunction, (\"Thread #: 2\", 2, lock))\\n</code></pre>\\n\\n<p>Also, what does <code>*args</code> mean in this example?</p>\\n</body></html>'", "306400": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Let\\'s say, as an example, I have the following list:</p>\\n\\n<pre><code>foo = [\\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\']\\n</code></pre>\\n\\n<p>What is the best way to retrieve an item at random from this list?</p>\\n</body></html>'", "1024847": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Is it possible to add a key to a Python dictionary after it has been created? It doesn\\'t seem to have an <code>.add()</code> method.</p>\\n</body></html>'", "1712227": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><pre><code>items = []\\nitems.append(\"apple\")\\nitems.append(\"orange\")\\nitems.append(\"banana\")\\n\\n// FAKE METHOD::\\nitems.amount()  // should return 3\\n</code></pre>\\n\\n<p>How I do it right?</p>\\n</body></html>'", "9371238": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code.  Since my C++ is rusty and I\\'m not yet an expert Pythonista, please tell me if I\\'m doing something wrong or if I\\'m misunderstanding something.  </p>\\n\\n<hr/>\\n\\n<p>(tl;dr answer: include the statement: cin.sync_with_stdio(false) or just use fgets instead.</p>\\n\\n<p>tl;dr results: scroll all the way down to the bottom of my question and look at the table.)</p>\\n\\n<hr/>\\n\\n<p><strong>C++ code:</strong></p>\\n\\n<pre><code>#include &lt;iostream&gt;\\n#include &lt;time.h&gt;\\n\\nusing namespace std;\\n\\nint main() {\\n    string input_line;\\n    long line_count = 0;\\n    time_t start = time(NULL);\\n    int sec;\\n    int lps;                                                                   \\n\\n    while (cin) {\\n        getline(cin, input_line);\\n        if (!cin.eof())\\n            line_count++;\\n    };\\n\\n    sec = (int) time(NULL) - start;\\n    cerr &lt;&lt; \"Read \" &lt;&lt; line_count &lt;&lt; \" lines in \" &lt;&lt; sec &lt;&lt; \" seconds.\" ;\\n    if (sec &gt; 0) {\\n        lps = line_count / sec;\\n        cerr &lt;&lt; \" LPS: \" &lt;&lt; lps &lt;&lt; endl;\\n    } else\\n        cerr &lt;&lt; endl;\\n    return 0;\\n}\\n\\n//Compiled with:\\n//g++ -O3 -o readline_test_cpp foo.cpp\\n</code></pre>\\n\\n<p><strong>Python Equivalent:</strong></p>\\n\\n<pre><code>#!/usr/bin/env python\\nimport time\\nimport sys\\n\\ncount = 0\\nstart = time.time()\\n\\nfor line in  sys.stdin:\\n    count += 1\\n\\ndelta_sec = int(time.time() - start_time)\\nif delta_sec &gt;= 0:\\n    lines_per_sec = int(round(count/delta_sec))\\n    print(\"Read {0} lines in {1} seconds. LPS: {2}\".format(count, delta_sec,\\n       lines_per_sec))\\n</code></pre>\\n\\n<p><strong>Here are my results:</strong></p>\\n\\n<pre><code>$ cat test_lines | ./readline_test_cpp \\nRead 5570000 lines in 9 seconds. LPS: 618889\\n\\n$cat test_lines | ./readline_test.py \\nRead 5570000 lines in 1 seconds. LPS: 5570000\\n</code></pre>\\n\\n<p>Thanks in advance!</p>\\n\\n<p><strong>Edit:</strong> <em>I should note that I tried this both under OS-X (10.6.8) and Linux 2.6.32 (RHEL 6.2).  The former is a macbook pro, the latter is a very beefy server, not that this is too pertinent.</em></p>\\n\\n<p><strong>Edit 2:</strong> <em>(Removed this edit, as no longer applicable)</em></p>\\n\\n<pre><code>$ for i in {1..5}; do echo \"Test run $i at `date`\"; echo -n \"CPP:\"; cat test_lines | ./readline_test_cpp ; echo -n \"Python:\"; cat test_lines | ./readline_test.py ; done\\nTest run 1 at Mon Feb 20 21:29:28 EST 2012\\nCPP:   Read 5570001 lines in 9 seconds. LPS: 618889\\nPython:Read 5570000 lines in 1 seconds. LPS: 5570000\\nTest run 2 at Mon Feb 20 21:29:39 EST 2012\\nCPP:   Read 5570001 lines in 9 seconds. LPS: 618889\\nPython:Read 5570000 lines in 1 seconds. LPS: 5570000\\nTest run 3 at Mon Feb 20 21:29:50 EST 2012\\nCPP:   Read 5570001 lines in 9 seconds. LPS: 618889\\nPython:Read 5570000 lines in 1 seconds. LPS: 5570000\\nTest run 4 at Mon Feb 20 21:30:01 EST 2012\\nCPP:   Read 5570001 lines in 9 seconds. LPS: 618889\\nPython:Read 5570000 lines in 1 seconds. LPS: 5570000\\nTest run 5 at Mon Feb 20 21:30:11 EST 2012\\nCPP:   Read 5570001 lines in 10 seconds. LPS: 557000\\nPython:Read 5570000 lines in  1 seconds. LPS: 5570000\\n</code></pre>\\n\\n<p><strong>Edit 3:</strong> </p>\\n\\n<p>Okay, I tried J.N.\\'s suggestion of trying having python store the line read: but it made no difference to python\\'s speed.  </p>\\n\\n<p>I also tried J.N.\\'s suggestion of using scanf into a char array instead of getline into a std::string.  Bingo!  This resulted in equivalent performance for both python and c++. (3,333,333 LPS with my input data, which by the way are just short lines of three fields each, usually about 20 chars wide, though sometimes more).</p>\\n\\n<p>Code:</p>\\n\\n<pre><code>char input_a[512];\\nchar input_b[32];\\nchar input_c[512];\\nwhile(scanf(\"%s %s %s\\\\n\", input_a, input_b, input_c) != EOF) {             \\n    line_count++;\\n};\\n</code></pre>\\n\\n<p>Speed:</p>\\n\\n<pre><code>$ cat test_lines | ./readline_test_cpp2 \\nRead 10000000 lines in 3 seconds. LPS: 3333333\\n$ cat test_lines | ./readline_test2.py \\nRead 10000000 lines in 3 seconds. LPS: 3333333\\n</code></pre>\\n\\n<p>(Yes, I ran it several times.) So, I guess I will now use scanf instead of getline.  But, I\\'m still curious if people think this performance hit from std::string/getline is typical and reasonable. </p>\\n\\n<p><strong>Edit 4 (was: Final Edit / Solution):</strong></p>\\n\\n<p>Adding:\\n    cin.sync_with_stdio(false);</p>\\n\\n<p>Immediately above my original while loop above results in code that runs faster than Python.  </p>\\n\\n<p><strong>New performance comparison</strong> (this is on my 2011 Macbook Pro), using the original code, the original with the sync disabled, and the original python, respectively, on a file with 20M lines of text.  Yes, I ran it several times to eliminate disk caching confound.</p>\\n\\n<pre><code>$ /usr/bin/time cat test_lines_double | ./readline_test_cpp\\n       33.30 real         0.04 user         0.74 sys\\nRead 20000001 lines in 33 seconds. LPS: 606060\\n$ /usr/bin/time cat test_lines_double | ./readline_test_cpp1b\\n        3.79 real         0.01 user         0.50 sys\\nRead 20000000 lines in 4 seconds. LPS: 5000000\\n$ /usr/bin/time cat test_lines_double | ./readline_test.py \\n        6.88 real         0.01 user         0.38 sys\\nRead 20000000 lines in 6 seconds. LPS: 3333333\\n</code></pre>\\n\\n<p>Thanks to @Vaughn Cato for his answer!  <strong><em>Any elaboration people can make or good references people can point to as to why this sync happens, what it means, when it\\'s useful, and when it\\'s okay to disable would be greatly appreciated by posterity.</em></strong> :-)</p>\\n\\n<p><strong>Edit 5 / Better Solution:</strong></p>\\n\\n<p>As suggested by Gandalf The Gray below, gets is even faster than scanf or the unsynchronized cin approach.  I also learned that <a href=\"http://c-faq.com/stdio/scanfprobs.html\">scanf</a> and <a href=\"http://c-faq.com/stdio/getsvsfgets.html\">gets</a> are both UNSAFE and should NOT BE USED due to potential of buffer overflow.  So, I wrote this iteration using fgets, the safer alternative to gets.  Here are the pertinent lines for my fellow noobs:</p>\\n\\n<pre><code>char input_line[MAX_LINE];\\nchar *result;\\n\\n//&lt;snip&gt;\\n\\nwhile((result = fgets(input_line, MAX_LINE, stdin )) != NULL)    \\n    line_count++;\\nif (ferror(stdin))\\n    perror(\"Error reading stdin.\");\\n</code></pre>\\n\\n<p>Now, here are the results using an even larger file (100M lines; ~3.4GB) on a fast server with very fast disk, comparing the python, the unsynced cin, and the fgets approaches, as well as comparing with the wc utility.  [The scanf version segfaulted and I don\\'t feel like troubleshooting it.]:</p>\\n\\n<pre><code>$ /usr/bin/time cat temp_big_file | readline_test.py \\n0.03user 2.04system 0:28.06elapsed 7%CPU (0avgtext+0avgdata 2464maxresident)k\\n0inputs+0outputs (0major+182minor)pagefaults 0swaps\\nRead 100000000 lines in 28 seconds. LPS: 3571428\\n\\n$ /usr/bin/time cat temp_big_file | readline_test_unsync_cin \\n0.03user 1.64system 0:08.10elapsed 20%CPU (0avgtext+0avgdata 2464maxresident)k\\n0inputs+0outputs (0major+182minor)pagefaults 0swaps\\nRead 100000000 lines in 8 seconds. LPS: 12500000\\n\\n$ /usr/bin/time cat temp_big_file | readline_test_fgets \\n0.00user 0.93system 0:07.01elapsed 13%CPU (0avgtext+0avgdata 2448maxresident)k\\n0inputs+0outputs (0major+181minor)pagefaults 0swaps\\nRead 100000000 lines in 7 seconds. LPS: 14285714\\n\\n$ /usr/bin/time cat temp_big_file | wc -l\\n0.01user 1.34system 0:01.83elapsed 74%CPU (0avgtext+0avgdata 2464maxresident)k\\n0inputs+0outputs (0major+182minor)pagefaults 0swaps\\n100000000\\n\\n\\nRecap (lines per second):\\npython:         3,571,428 \\ncin (no sync): 12,500,000\\nfgets:         14,285,714\\nwc:            54,644,808\\n</code></pre>\\n\\n<p>As you can see, fgets is better but still pretty far from wc performance; I\\'m pretty sure this is due to the fact that wc examines each character without any memory copying.  I suspect that, at this point, other parts of the code will become the bottleneck, so I don\\'t think optimizing to that level would even be worthwhile, even if possible (since, after all, I actually need to store the read lines in memory).  </p>\\n\\n<p>Also note that a small tradeoff with using a char * buffer and fgets vs unsynced cin to string is that the latter can read lines of any length, while the former requires limiting input to some finite number.  In practice, this is probably a non-issue for reading most line-based input files, as the buffer can be set to a very large value that would not be exceeded by valid input. </p>\\n\\n<p>This has been educational.  Thanks to all for your comments and suggestions.</p>\\n\\n<p><strong>Edit 6:</strong></p>\\n\\n<p>As suggested by J.F. Sebastian in the comments below, the GNU wc utility uses plain C read() (within the safe-read.c wrapper) to read chunks (of 16k bytes) at a time and count new lines.  Here\\'s a python equivalent based on J.F.\\'s code (just showing the relevant snippet that replaces the python for loop:</p>\\n\\n<pre><code>BUFFER_SIZE = 16384 \\ncount = sum(chunk.count(\\'\\\\n\\') for chunk in iter(partial(sys.stdin.read, BUFFER_SIZE), \\'\\'))\\n</code></pre>\\n\\n<p>The performance of this version is quite fast (though still a bit slower than the raw c wc utility, of course:</p>\\n\\n<pre><code>$ /usr/bin/time cat temp_big_file | readline_test3.py \\n0.01user 1.16system 0:04.74elapsed 24%CPU (0avgtext+0avgdata 2448maxresident)k\\n0inputs+0outputs (0major+181minor)pagefaults 0swaps\\nRead 100000000 lines in 4.7275 seconds. LPS: 21152829\\n</code></pre>\\n\\n<p>Again, it\\'s a bit silly for me to compare C++ fgets/cin and the first python code on the one hand to wc -l and this last python snippet on the other, as the latter two don\\'t actually store the read lines but merely count newlines.  Still, it\\'s interesting to explore all the different implementations and think about the performance implications.  Thanks again!</p>\\n\\n<p><strong>Edit 7: Tiny benchmark addendum and recap</strong></p>\\n\\n<p>(Hello HN readers!)   </p>\\n\\n<p>For completeness, I thought I\\'d update the read speed for the same file on the same box with the original (synced) C++ code.  Again, this is for a 100M line file on a fast disk. Here\\'s the complete table now:</p>\\n\\n<pre><code>Implementation      Lines per second\\npython (default)           3,571,428\\ncin (default/naive)          819,672\\ncin (no sync)             12,500,000\\nfgets                     14,285,714\\nwc (not fair comparison)  54,644,808\\n</code></pre>\\n\\n<p>Also, see my follow-up <a href=\"http://stackoverflow.com/questions/9378500/why-is-splitting-a-string-slower-in-c-than-python\">question</a> about splitting lines in C++ vs Python... a similar speed story, where the naive approach is slower in C++!</p>\\n\\n<p>Edit: for clarity, removed tiny bug in original code that wasn\\'t related to the question. Finally, tiny tweaks to white space and output strings to make comparison easier/clearer.</p>\\n</body></html>'", "735975": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Is it possible to have static methods in Python so I can call them without initializing a class, like:</p>\\n\\n<pre><code>ClassName.StaticMethod ( )\\n</code></pre>\\n</body></html>'", "610883": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>Is there a way in Python to determine if an object has some attribute?  For example:</p>\\n\\n<pre><code>&gt;&gt;&gt; a = SomeClass()\\n&gt;&gt;&gt; a.someProperty = value\\n&gt;&gt;&gt; a.property\\nTraceback (most recent call last):\\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\\nAttributeError: SomeClass instance has no attribute \\'property\\'\\n</code></pre>\\n\\n<p>How can you tell if <code>a</code> has the attribute <code>property</code> before using it?</p>\\n</body></html>'", "354038": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>What is the best possible way to check if a string can be represented as a number in Python? </p>\\n\\n<p>The function I currently have right now is:</p>\\n\\n<pre><code>def is_number(s):\\n    try:\\n        float(s)\\n        return True\\n    except ValueError:\\n        return False\\n</code></pre>\\n\\n<p>Which, not only is ugly and slow, seems clunky. However I haven\\'t found a better method because calling <code>float</code> in the main function is even worse. </p>\\n</body></html>'", "101754": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>I like the Android platform. Actually, with some friends, we even participate to the ADC with the Spoxt project.</p>\\n\\n<p>But Java is not my favourite language at all. We are working on a S60 version and this platform has a nice Python API. Of course there is nothing official about Python on Android, but since Jython exists, does anybody know a way to let the snake and the robot work together ?</p>\\n</body></html>'", "493819": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>This has always confused me. It seems like this would be nicer:</p>\\n\\n<pre><code>my_list = [\"Hello\", \"world\"]\\nprint my_list.join(\"-\")\\n# Produce: \"Hello-world\"\\n</code></pre>\\n\\n<p>Than this:</p>\\n\\n<pre><code>my_list = [\"Hello\", \"world\"]\\nprint \"-\".join(my_list)\\n# Produce: \"Hello-world\"\\n</code></pre>\\n\\n<p>Is there a specific reason it does it like this?</p>\\n</body></html>'", "287871": "b'<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\\n<html><body><p>How can I output colored text to the terminal, in Python?\\nWhat is the best Unicode symbol to represent a solid block?</p>\\n</body></html>'"}, "description": "this file contains the content of questions returned by the query"}